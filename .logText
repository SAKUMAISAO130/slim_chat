planUMLのplantuml.jarをインストールする（http://plantuml.com/download）
doxygenインストール（http://kinokoru.jp/archives/399）

Vagrantファイル、HTMLファイルとindex.html、PDO.php配置
vagrant構築（外部HTMLディレクトリ）
php、Mysql、apacheインストール(http://qiita.com/knife0125/items/a2c0ede8097f9a7695cd)
ドメイン確認、htmlフォルダ確認
httpd、mysqld自動起動設定(http://vdeep.net/vagrant-start-web-server、http://d.hatena.ne.jp/Michael_e29/20110922/1316696820)
pearインストール(http://linuxserver.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/php/pear/pear%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB)
gitインストール


laravelインストール(git clone https://github.com/laravel/laravel)
composerインストール(http://qiita.com/CatCable/items/02364adacf36410f449e)
デバッガーの記述を追加(https://github.com/barryvdh/laravel-debugbar)
composer.json編集後、laravelをビルド
データベース作成(http://webkaru.net/mysql/mysql-root-password/)
データベース接続確認
8080ポート開放(http://www.rickynews.com/blog/2014/05/28/thinking-about-apache-vhost/)
ポート確認(http://itpro.nikkeibp.co.jp/article/COLUMN/20070124/259606/?rt=nocnt)
appディレクトリに、doxygenファイル設置、設定確認後ビルド
mac側のパーミッションも変更する

バーチャルホスト設定
------------------------------------------------------------
vi /etc/httpd/conf.d/vhosts.conf

<VirtualHost *:80>
  ServerName http://dev.slim-chat.com
  DirectoryIndex index.html index.php
  AddDefaultCharset UTF-8
  DocumentRoot /var/www/html/slim-chat.com/public
  <Directory "/var/www/html/slim-chat.com/public">
    AllowOverride All
    Options FollowSymLinks -Indexes
  </Directory>
</VirtualHost>

<VirtualHost *:8080>
  ServerName http://dev.slim-chat.com
  DirectoryIndex index.html index.php
  AddDefaultCharset UTF-8
  DocumentRoot /var/www/html/html
  <Directory "/var/www/html/html">
    AllowOverride All
    Options FollowSymLinks -Indexes
  </Directory>
</VirtualHost>

<VirtualHost *:80>
  ServerAlias slim-thread.com
  ServerName http://slim-thread.com
  DirectoryIndex index.html index.php
  AddDefaultCharset UTF-8
  DocumentRoot /var/www/html/slim-thread.com
    ErrorLog "/etc/httpd/logs/error_log_slim_thread"
    CustomLog "/etc/httpd/logs/access_log_slim_thread" common

  <Directory "/var/www/html/slim-thread.com">
    AllowOverride All
    Options FollowSymLinks -Indexes
  </Directory>
</VirtualHost>


 

vi /etc/hosts

192.168.33.100 dev.slim-chat.com doc.slim-chat.com
------------------------------------------------------------
TOP表示確認、テストファイル実行(http://qiita.com/zaburo/items/839c81a1e166a48fe3fa)

#################################################################

#基本要件

- 新規登録機能
- ログイン機能
- チャット機能
- カテゴリ機能

#################################################################

モデルmake
テーブルマイグレーションmake
テストmake(http://qiita.com/niisan-tokyo/items/264d4e8584ed58536bf4)
コントローラーmake

#################################################################

テーブルマイグレーション
単体テスト作成(※ついついローカルでテストしてしまいがちなので注意)
- ルーティングテスト
- 関数の入出力テスト（引数、返り値）
- 稼働テスト
- 表示結果テスト

ユニットテスト実行

#################################################################
コメント
/**
 * 一行目は関数の概要を記入します。
 * @author  スクリプト作者
 * @date  日付
 * @version バージョン
 * @note  注釈を記述
 * @param $a ここにパラメータ$aのコメントを記入します。
 * @param $b ここにパラメータ$bのコメントを記入します。
 * @return  ここに関数の戻り値を記入します。
*/
function func($a, $b) {
　・
　・
}

#################################################################

モデル作成
コントローラー作成
ビュー作成
ユニットテスト実行

#################################################################

処理を別ファイルに移す
元ファイルからそのファイルをrequireする
クラス空間名をつけてあげる
元ファイルからインスタンスオブジェクトを作る。もちろん名前空間は守る

■Viewファイル
htmlファイルで使われている変数は、オブジェクトプロパティの形に変更してあげる
関数はメソッドの形に書き換えてあげる

■Classファイル
クラスファイルに必要なプロパティとコンストラクタとメソッドを側だけ書き設計図とする
プライベートをアンスコにしているかチェック
コンストラクタでプロパティを作ってしまえるとラク
組み込みクラスは絶対指定にしたかチェック

#################################################################


vagrant -v
cat /etc/redhat-release
php -v
httpd -v
mysql --version

#################################################################
http://help.blogdehp.jp/m/cat/fo_ki/images/checksheet.pdf
フォームの入力
１ 必要な入力項目がすべてあるか
２ 必須項目は正しく設定されているか

送信ボタン周辺の表示
３ 送信ボタンの上下の文言は正しいか
４ 送信ボタンの文言は正しいか

フォーム送信後画面
５ 送信完了画面は表示されるか
６ 送信完了画面の内容は正しいか

自動返信メール（利用している場合のみ）
７ 自動返信メールは送られてきたか
８ 自動返信メールの送信者名と送信メールアドレスは正しいか
９ 自動返信メールの件名は正しいか
10 自動返信メールの本文は正しいか

通知メール
11 通知メールは正しい宛先に送られてきたか
12 通知メールの件名は正しいか
13 フォームの分類名は正しいか

顧客データ
14 顧客データに登録されているか 

#################################################################
http://blog.enjoyxstudy.com/entry/20060817/p1


#################################################################

http://web-atelier-midori.com/blog/web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9/1526/
・閾値テスト　制限値を超えたテスト
・記号チェック　テキスト入力して問題ないか(!”#$%&'()=~|\^-@:;,./)
・削除、登録、関係ないところに影響ないか
・レスポンスのチェック
・エンコードする文字は文字化けしないか
・GETパラメータ長さ制限チェック
→　　ダミーテキストを入れてチェック
http://webtools.dounokouno.com/dummytext/
※GET日本語パラメータはUTF8でエンコードしているか
・SQLインジェンクション対策はされているか
・表示する際、エスケープ処理は考慮されているか




#################################################################

■Web アプリケーションのテストの方法とテスト・ツールのまとめ
https://www.ibm.com/developerworks/jp/web/library/wa-webapptesting/

■unoh.github.com by unoh
https://unoh.github.io/2007/07/31/web_5.html

■企業システム戦略の基礎知識（14）：ドキュメントレビューに役立つ40のチェックポイント (1/3) - ITmedia エンタープライズ
http://www.itmedia.co.jp/im/articles/0512/27/news090.html

■受け入れテスト用セキュリティチェックリスト for Webアプリケーション
http://www.geocities.jp/ikepy0n/securitycheck.html

■Webディレクターも押さえておきたいテストの基本ポイント | | モノづくりブログ - 株式会社8bit
http://blog.8bit.co.jp/?p=4408

■入力フォームに対するテスト項目 | | Webサービス | みどりのウェブ開発日記　Ajax jQuery PHP XHTML CSS の覚書
http://web-atelier-midori.com/blog/web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9/1526/

■WEBシステムでの入力文字のテストについて - Enjoy*Study
http://blog.enjoyxstudy.com/entry/20060817/p1

■checksheet.pdf
http://help.blogdehp.jp/m/cat/fo_ki/images/checksheet.pdf

#################################################################

sample todo
https://github.com/jumilla/l4-sample-todo/blob/master/app/controllers/TodosController.php

個々の機能
http://laraweb.net/category/entering/page/3/

フォーム制作のチェックリスト
http://qiita.com/ponko2/items/fd7ac38b964e10f16f52
http://laraweb.net/category/entering/page/3/



#################################################################
App\Post::all()->toArray();
App\Post::where('id', '>', 1)->get()->toArray();
App\Post::where('id', '>', 1)->orderBy('created_at', 'desc')->get()->toArray();
App\Post::where('id', '>', 1)->take(1)->get()->toArray();
$post = App\Post::find(3);
$post->title = 'title 3 updated';
$post->save();
App\Post::all()->toArray();
App\Post::find(3)->update(['title'=>'title 3 updated again']);
App\Post::all()->toArray();
$post = App\Post::find(3);
$post->delete();
App\Post::all()->toArray();

・・・・・・・・・・・・・・・・・・・・・・・・・

public function index() {
  // $posts = \App\Post::all();
  // $posts = Post::all();
  // $posts = Post::orderBy('created_at', 'desc')->get();
  $posts = Post::latest('created_at')->get();

  dd($posts->toArray()); // dump die

  return view('posts.index');
}

・・・・・・・・・・・・・・・・・・・・・・・・・


<ul>
  @forelse ($posts as $post)
  <li><a href="">{{ $post->title }}</a></li>
  @empty
  <li>No posts yet</li>
  @endforelse
</ul>


・・・・・・・・・・・・・・・・・・・・・・・・・
    Route::get('/', 'PostsController@index');
    Route::get('/posts/{id}', 'PostsController@show');




    public function show($id) {
      $post = Post::findOrFail($id);
      return view('posts.show')->with('post', $post);
    }



<ul>
  @forelse ($posts as $post)
  <!-- <li><a href="/posts/{{ $post->id }}">{{ $post->title }}</a></li> -->
  <!-- <li><a href="{{ url('/posts', $post->id) }}">{{ $post->title }}</a></li> -->
  <li><a href="{{ action('PostsController@show', $post->id) }}">{{ $post->title }}</a></li>
  @empty
  <li>No posts yet</li>
  @endforelse
</ul>




@section('content')
<h1>{{ $post->title }}</h1>
<p>{!! nl2br(e($post->body)) !!}</p>
@endsection
・・・・・・・・・・・・・・・・・・・・・・・・・



<a href="{{ url('/') }}" class="pull-right fs12">Back</a>


↓ルーティングの行の順番で処理順が重要であるということ

動画内にて紹介しているルーティングの設定ですが、where を使って {id} が数値の場合のみ適用、とすれば（今回の場合は）書く順番を気にする必要はありません。
Route::get('/posts/{id}', 'PostsController@show');
↓以下のように変更
Route::get('/posts/{id}', 'PostsController@show')
    ->where('id', '[1-9][0-9]*');
開発の規模が大きくなってくると記述する順番を気にするよりは、このようにwhereを使った方が良いでしょう。


・・・・・・・・・・・・・・・・・・・・・・・・・

登録

    public function store(Request $request) {
      $post = new Post();
      $post->title = $request->title;
      $post->body = $request->body;
      $post->save();
      return redirect('/');
    }





・・・・・・・・・・・・・・・・・・・・・・・・・

return redirect('/')->with('flash_message', 'Post Added!');


  @if (session('flash_message'))
  <div class="flash_message" onclick="this.classList.add('hidden')">{{ session('flash_message') }}</div>
  @endif
・・・・・・・・・・・・・・・・・・・・・・・・・
バリデーション
    public function store(Request $request) {
      $this->validate($request, [
        'title' => 'required|min:3',
        'body' => 'required'
      ]);
      $post = new Post();
      $post->title = $request->title;
      $post->body = $request->body;
      $post->save();
      return redirect('/')->with('flash_message', 'Post Added!');
    }


・・・・・・・・・・・・・・・・・・・・・・・・・
oldヘルパー
  <p>
    <input type="text" name="title" placeholder="title" value="{{ old('title') }}">
    @if ($errors->has('title'))
    <span class="error">{{ $errors->first('title') }}</span>
    @endif
  </p>
・・・・・・・・・・・・・・・・・・・・・・・・・
oldヘルパー第二引数にはoldがなかった場合の値を表示
  <p>
    <input type="text" name="title" placeholder="title" value="{{ old('title', $post->title) }}">
    @if ($errors->has('title'))
    <span class="error">{{ $errors->first('title') }}</span>
    @endif
  </p>

・・・・・・・・・・・・・・・・・・・・・・・・・
アップデートのメソッド（idが渡ってくる）

Route::patch('/posts/{id}', 'PostsController@update');


    public function update(PostRequest $request, $id) {
      // $this->validate($request, [
      //   'title' => 'required|min:3',
      //   'body' => 'required'
      // ]);
      $post = Post::findOrFail($id);
      $post->title = $request->title;
      $post->body = $request->body;
      $post->save();
      return redirect('/')->with('flash_message', 'Post Updated!');
    }


・・・・・・・・・・・・・・・・・・・・・・・・・
php artisan make:request PostRequest
/myblog/app/Http/Requests/PostRequest.php
バリデーションの外部化



namespace App\Http\Requests;

use App\Http\Requests\Request;

class PostRequest extends Request
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        // return false;
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
          'title' => 'required|min:3',
          'body' => 'required'
        ];
    }
}



    public function store(PostRequest $request) {
      // $this->validate($request, [
      //   'title' => 'required|min:3',
      //   'body' => 'required'
      // ]);

          public function update(PostRequest $request, $id) {
・・・・・・・・・・・・・・・・・・・・・・・・・
リンクに使う、各項目に紐付いたIDは、ループの中で出せば対応したものが出るのでそれを使う（$postの部分）

  @forelse ($posts as $post)
  <!-- <li><a href="/posts/{{ $post->id }}">{{ $post->title }}</a></li> -->
  <!-- <li><a href="{{ url('/posts', $post->id) }}">{{ $post->title }}</a></li> -->
  <li><a href="{{ action('PostsController@show', $post->id) }}">{{ $post->title }}</a></li>
  @empty
  <li>No posts yet</li>
  @endforelse



IDは引数で受け取れるので忘れずに、findでもいいが、見つからなかったとき例外を返したいのでfindOrFailを使う　
public function show($id) {
      $post = Post::findOrFail($id);
      return view('posts.show')->with('post', $post);
    }
・・・・・・・・・・・・・・・・・・・・・・・・・
・・・・・・・・・・・・・・・・・・・・・・・・・
紐付けるマイグレーションは多少注意が必要

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateCommentsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('comments', function (Blueprint $table) {
            $table->increments('id');
            $table->integer('post_id')->unsigned();
            $table->string('body');
            $table->timestamps();


ポストを消すと、そのIDも消えるやつ
            $table->foreign('post_id')
                  ->references('id')
                  ->on('posts')
                  ->onDelete('cascade');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::drop('comments');
    }
}
・・・・・・・・・・・・・・・・・・・・・・・・・
DBの紐付け

namespace App;

use Illuminate\Database\Eloquent\Model;

class Comment extends Model
{
    //
    protected $fillable = ['body'];

    // comment->post
    public function post() {
      return $this->belongsTo('App\Post');
    }
}



<?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    //
    protected $fillable = ['title', 'body'];

    public function comments() {
      return $this->hasMany('App\Comment');
    }
}



<h2>Comments</h2>
<ul>
  @forelse ($post->comments as $comment)
  <li>{{ $comment->body }}</li>
  @empty
  <li>No comment yet</li>
  @endforelse
</ul>

<h2>Add New Comment</h2>
<form method="post" action="{{ action('CommentsController@store', $post->id) }}">
  {{ csrf_field() }}
  <p>
    <input type="text" name="body" placeholder="body" value="{{ old('body') }}">
    @if ($errors->has('body'))
    <span class="error">{{ $errors->first('body') }}</span>
    @endif
  </p>
  <p>
    <input type="submit" value="Add Comment">
  </p>
</form>
・・・・・・・・・・・・・・・・・・・・・・・・・
紐付けたものの保存

<form method="post" action="{{ action('CommentsController@store', $post->id) }}">

※フォームが２つある時などは必要
Route::post('/posts/{post}/comments', 'CommentsController@store');


二つ目の引数が重要（名前はわかりやすければなんでもいい、どうせアクションの第二引数が取得できるだけだから）
１つ目の引数もアクションの第一引数にアクション名を渡してPOSTすれば勝手に$requestが第一引数に渡ってくる
あとはバリデーションして、値を撮ってモデルを作る
    public function store(Request $request, $postId) {
      $this->validate($request, [
        'body' => 'required'
      ]);

      $comment = new Comment(['body' => $request->body]);
      $post = Post::findOrFail($postId);
      $post->comments()->save($comment);

      return redirect()
             ->action('PostsController@show', $post->id);
    }
・・・・・・・・・・・・・・・・・・・・・・・・・
@forelseは
findOrFailとリンクしている
・・・・・・・・・・・・・・・・・・・・・・・・・
・・・・・・・・・・・・・・・・・・・・・・・・・
・・・・・・・・・・・・・・・・・・・・・・・・・
・・・・・・・・・・・・・・・・・・・・・・・・・
まずはdd();で内容を出してみる
で、２つとも別のモデルオブジェクトを作ってしまえばいい
それと他の人がどうやってリレーションさせているかgitをチェック

・バケットと自分の差異を確認（GIT）
・都道府県をどうやってだすのか、そしてだす（ORM）
・フォームを揃える（HTML）
・バリデーションを導入（オリジナルリクエストを通す）
・各項目に保存する（それぞれに出力してみる、ORM、最悪個々に分ける）

時間が余ればエラー、シーケンス系、フラッシュメッセージの永続化、保存のエクセプション（try,catch）

テストデータはシーダーで生成してもよい

////////////////////////////////////////////////////
<?php

// 例外処理

// function div($a, $b) {
//   echo $a / $b;
// }

function div($a, $b) {
  try {
    if ($b === 0) {
      throw new Exception("cannot divide by 0!");
    }
    echo $a / $b;
  } catch (Exception $e) {
    echo $e->getMessage();
  }
}

div(7, 2);
div(5, 0);

////////////////////////////////////////////////////////////////////

https://colo-ri.jp/develop/2008/04/seleniumjavascript.html
http://d.hatena.ne.jp/nazoking/20070205/1170673230
http://qiita.com/oh_rusty_nail/items/c59d4345d5372213128f
http://iflaglabs.jp/original10.html
http://qiita.com/gluelan2013/items/93730e4618bf490042b1


https://blog.hello-world.jp.net/javascript/1961/


<script type="text/javascript">
var v = document.getElementsByTagName('body');
var d = v[0].innerHTML;
var m = d.match(/!--(.*)--/g);
var c = m.length;
m[0] = m[0].replace(/!--/g, "");
m[0] = m[0].replace(/--/g, "");
m[0] = m[0].replace(/ /g, "");
console.log(m);
</script>



var v = document.getElementsByTagName('body');
var d = v[0].innerHTML;
var m = d.match(/--(.*)--/g);
m[0] = m[0].replace(/!--/g, "");
m[0] = m[0].replace(/--/g, "");
m[0] = m[0].replace(/ /g, "");
console.log(d);





//////////////////////////////////
var v = document.getElementsByTagName('body');
var d = v[0].innerHTML;
var m = d.match(/!--(.*)--/g);
var c = m.length;
m[0] = m[0].replace(/!--/g, "");
m[0] = m[0].replace(/--/g, "");
m[0] = m[0].replace(/ /g, "");
console.log(m);






#単体部分
基本設計書の使用を満たしているか
ログが適切に出力されているか
jsがOffの場合の処理
getできたときにエントリーページへ飛ばす？
カナ文字のみのところはバリデーションルールがない？
http://labs.opentone.co.jp/?p=246


##結合先機能
- ログイン機能
ログインできるか
ログイン後正しい情報が紐付けされて表示されているか
パスワードを送ってるなど、平文を利用していないか

- 業者一覧表示機能
紐付けされている情報が正しいかどうか
ロールに限らず全件表示されているか

- その他機能
紐付けされている情報が正しいかどうか


###セキュリティ
意図しないデータをどうやっても入力できないかどうか



###負荷系
- サーバーリクエスト処理
http://qiita.com/flexfirm/items/ac5a2f53cfa933a37192


